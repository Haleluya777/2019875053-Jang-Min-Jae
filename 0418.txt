ftype.c
#include <sys/types.h>
#include <sys/stat.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
/* 파일 타입을 검사한다. */
int main(int argc, char *argv[])
{
        int i;
        struct stat buf;
        for (i = 1; i < argc; i++) {
                printf("%s: ", argv[i]);
                if (lstat(argv[i], &buf) < 0) {
                        perror("lstat()");
                        continue;
                }if (S_ISREG(buf.st_mode))
                printf("%s \n", "일반 파일");
                if (S_ISDIR(buf.st_mode))
                        printf("%s \n", "디렉터리");
                if (S_ISCHR(buf.st_mode))
                        printf("%s \n", "문자 장치 파일");
                if (S_ISBLK(buf.st_mode))
                        printf("%s \n", "블록 장치 파일");
                if (S_ISFIFO(buf.st_mode))
                        printf("%s \n", "FIFO 파일");
                if (S_ISLNK(buf.st_mode))
                        printf("%s \n", "심볼릭 링크");
                if (S_ISSOCK(buf.st_mode))
                        printf("%s \n", "소켓");
        }
        exit(0);
}


list.c
#include <sys/types.h>
#include <sys/stat.h>
#include <dirent.h>
#include <pwd.h>
#include <grp.h>
#include <stdio.h>
#include <stdlib.h>

char type(mode_t);
char *perm(mode_t);
void printStat(char*, char*, struct stat*);

/* 디렉터리 내용을 자세히 리스트한다. */
int main(int argc, char **argv)
{
        DIR *dp;
        char *dir;
        struct stat st;
        struct dirent *d;
        char path[BUFSIZ+1];
        if (argc == 1)
                dir = ".";
        else dir = argv[1];
        if ((dp = opendir(dir)) == NULL) // 디렉터리 열기
                perror(dir);

        while ((d = readdir(dp)) != NULL) { // 디렉터리의 각 파일에 대해
                sprintf(path,"%s/%s", dir, d->d_name); // 파일경로명 만들기
                if (lstat(path, &st) < 0) // 파일 상태 정보 가져오기
                        perror(path);
                printStat(path, d->d_name, &st); // 상태 정보 출력
                putchar('\n');
        }
                closedir(dp);
        exit(0);
}
void printStat(char *pathname, char *file, struct stat *st) {
        printf("%5ld ", st->st_blocks);
        printf("%c%s ", type(st->st_mode), perm(st->st_mode));
        printf("%3ld ", st->st_nlink);
        printf("%s %s ", getpwuid(st->st_uid)->pw_name,getgrgid(st->st_gid)->gr_name);
        printf("%9ld ", st->st_size);
        printf("%d ", ctime(&st->st_mtime)+4);
        printf("%s", file);
}
char type(mode_t mode) {
        if (S_ISREG(mode))
                return('-');
        if (S_ISDIR(mode))
                return('d');
        if (S_ISCHR(mode))
                return('c');
        if (S_ISBLK(mode))
                return('b');
        if (S_ISLNK(mode))
                return('l');
        if (S_ISFIFO(mode))
                return('p');
        if (S_ISSOCK(mode))
                return('s');
}
/* 파일 사용권한을 리턴 */
char* perm(mode_t mode) {
        int i;
        static char perms[10] = "---------";
        for (i=0; i < 3; i++) {
        if (mode & (S_IREAD >> i*3))
                perms[i*3] = 'r';
        if (mode & (S_IWRITE >> i*3))
                perms[i*3+1] = 'w';
        if (mode & (S_IEXEC >> i*3))
                perms[i*3+2] = 'x';
        }
        return(perms);
}